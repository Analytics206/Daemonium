services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: daemonium-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-ch@ng3m300}
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - daemonium-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # PostgreSQL service
  postgresql:
    image: postgres:latest
    container_name: daemonium-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ch@ng3m300}
      POSTGRES_DB: ${POSTGRES_DB:-daemonium}
    ports:
      - "5433:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - daemonium-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # Qdrant vector database service
  qdrant:
    image: qdrant/qdrant:latest
    container_name: daemonium-qdrant
    restart: unless-stopped
    ports:
      - "6343:6333" # REST API
      - "6344:6334" # GRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - daemonium-network
    environment:
      QDRANT_ALLOW_RECOVERY_MODE: "true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # Neo4j graph database service (Enterprise Edition)
  neo4j:
    image: neo4j:enterprise
    container_name: daemonium-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH:-neo4j/ch@ng3m300}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      # Enable multi-database support
      NEO4J_dbms_default__database: neo4j
    ports:
      - "7475:7474" # HTTP
      - "7688:7687" # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - daemonium-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "ch@ng3m300", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  
  # FastAPI Backend service
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: daemonium-backend
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./config:/app/config
    networks:
      - daemonium-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Docker volumes for data persistence
volumes:
  mongo_data:
    driver: local
    driver_opts:
      type: none
      device: ./docker_volumes/mongo_data
      o: bind
    name: daemonium_mongo_data
    labels:
      - "project=daemonium"
      - "database=mongodb"
  postgresql_data:
    driver: local
    driver_opts:
      type: none
      device: ./docker_volumes/postgresql_data
      o: bind
    name: daemonium_postgresql_data
    labels:
      - "project=daemonium"
      - "database=postgresql"
  qdrant_data:
    driver: local
    driver_opts:
      type: none
      device: ./docker_volumes/qdrant_data
      o: bind
    name: daemonium_qdrant_data
    labels:
      - "project=daemonium"
      - "database=qdrant"
      - "vector=embeddings"
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      device: ./docker_volumes/neo4j_data
      o: bind
    name: daemonium_neo4j_data
    labels:
      - "project=daemonium"
      - "database=neo4j"
      - "graph=knowledge"
  neo4j_logs:
    driver: local
    driver_opts:
      type: none
      device: ./docker_volumes/neo4j_logs
      o: bind
    name: daemonium_neo4j_logs
    labels:
      - "project=daemonium"
      - "database=neo4j"
      - "type=logs"
  neo4j_import:
    driver: local
    driver_opts:
      type: none
      device: ./docker_volumes/neo4j_import
      o: bind
    name: daemonium_neo4j_import
    labels:
      - "project=daemonium"
      - "database=neo4j"
      - "type=import"
  neo4j_plugins:
    driver: local
    driver_opts:
      type: none
      device: ./docker_volumes/neo4j_plugins
      o: bind
    name: daemonium_neo4j_plugins
    labels:
      - "project=daemonium"
      - "database=neo4j"
      - "type=plugins"

# Network configuration
networks:
  daemonium-network:
    name: daemonium-network
    driver: bridge


